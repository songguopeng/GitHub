#include<iostream>
#include<iterator>
#include<ctime>
using namespace std;

int quick_sort(int *a, int low, int high);
int partition(int *a, int low, int high);
void randomizedQuickSort(int *a, int low, int high);

void randomizedQuickSort(int *a, int low, int high)//基于时间随机基准；
{
	if (high > low)
	{
		srand((unsigned)time(NULL));
		int iAncharIndex = rand() % (high - low + 1) + low;
		swap(a[iAncharIndex], a[low]);
		int k = partition(a, low, high);
		randomizedQuickSort(a, low, k - 1);
		randomizedQuickSort(a, k + 1, high);
	}
}
int partition(int *a, int low, int high)//分割函数partition 需要缓存数组，时间为O（n）；
{
	int i = low + 1;
	int j = high;
	int pos = a[low];
	while (i <= j)
	{
		while (i <= j&&a[i] <= pos)i++;

		while (a[j] > pos)--j;
		if (i < j)
		{
			swap(a[i], a[j]);
			++i; --j;
		}
	}
	swap(a[low], a[j]);
	return j;
}
int quick_sort(int *a, int low,int high)
{
	if (high > low)
	{
		int k = partition(a, low, high);
		quick_sort(a, low, k-1 );
		quick_sort(a, k + 1, high);
	}
	return 0;
}

int main()
{
	int n;
	while (cin >> n&&n != -1)
	{
		int *a = new int[n];
		for (int i = 0; i < n; i++)
			cin >> a[i];
		copy(a, a + n, ostream_iterator<int>(cout, "\t"));
		cout << endl;
		randomizedQuickSort(a, 0, n-1);
		copy(a, a + n, ostream_iterator<int>(cout, "\t"));
		cout << endl;
	}
	return 0;
}