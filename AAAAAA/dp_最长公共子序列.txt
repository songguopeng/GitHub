#include<iostream>
#include<fstream>
#include<string>
#include<vector>
#include<algorithm>
#include<iterator>

using namespace std;

class MyMaxCommonString
{
	string a, b;
	vector<vector<int> >L;
public:
	MyMaxCommonString(string s1, string s2) :a(s1), b(s2), L(s1.length() + 1, vector<int>(s2.length() + 1,0 ))
	{

	}
	int GetMaxLength()
	{
		int row = L.size();
		int col = L[0].size();
		return L[row - 1][col - 1];
	}
	string GetMaxCommonString()
	{
		string s = "";
		int maxLen = GetMaxLength();
		vector<int>::iterator it;
		if (maxLen > 0)
		{
			int i = 0;
			for (i = 0; i < L.size(); ++i)
			{
				it = find(L[i].begin(), L[i].end(), maxLen);
				if (it != L[i].end())
					break;
			}
			int row = i;
			int col = it - L[i].begin();
			s += a.substr(row - 1, 1);
			int start = maxLen - 1;
			int end = start;
			while (start >= 1)
			{
				row--, col--;
				end = L[row][col];
				if (end != start)
				{
					s += a.substr(row, 1);
					start--;
				}
			}
			reverse(s.begin(), s.end());
		}
		return s;
	}
	void Process()
	{
		for (int i = 1; i < L.size(); i++)
		{
			for (int j = 1; j < L[0].size(); j++)
			{
				if (a.at(i - 1) == b.at(j - 1))
				{
					L[i][j] = L[i - 1][j - 1] + 1;
				}
				else
				{
					L[i][j] = max(L[i][j - 1], L[i - 1][j]);
				}

			}
		}
	}
	void show(ostream & os)
	{
		for (int i = 0; i < L.size(); i++)
		{
			copy(L[i].begin(), L[i].end(), ostream_iterator<int>(os, "\t"));
			os << endl;
		}
	}
};
int main()
{
	string s1, s2;
	
	while (cin >> s1 >> s2)
	{
		
		MyMaxCommonString m(s1, s2);
		cout << "字符串1：" << s1 << endl;
		cout << "字符串2: " << s2 << endl;
		m.Process();
		m.show(cout);
		int maxlen = m.GetMaxLength();
		string maxstr = m.GetMaxCommonString();
		cout << "最大公共序列长度:" << maxlen << endl;
		cout << "最大公共序列串：" << maxstr << endl;
		
	}
	system("pause");
	return 0;
}