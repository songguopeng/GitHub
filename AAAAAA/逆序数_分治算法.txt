#include<iostream>
#include<iterator>

using namespace std;
long MergeReverse(int[], int[], int, int, int);
long reverseOrderPairs(int[], int[], int, int);
long MergeReverse(int *a, int *b, int low, int mid, int high)
{
	int i = low, j = mid + 1, k = low;
	long cnt = 0;
	while (i <= mid&&j <= high)
	{
		if (a[i] < a[j])
			b[k++] = a[i++];
		else
		{
			cnt += mid - i + 1;//计算逆序数；
			b[k++] = a[j++];
		}
	}
	while (i <= mid)
		b[k++] = a[i++];
	while (j <= high)
		b[k++] = a[j++];
	return cnt;
}
long reverseOrderPairs(int *a, int *b, int low, int high)
{
	if (low == high) return 0;//出口条件
	int mid = (low + high) / 2;
	long c1, c2, c3;
	c1 = reverseOrderPairs(a, b, low, mid);
	c2 = reverseOrderPairs(a, b, mid + 1, high);
	c3 = MergeReverse(a, b, low, mid, high);
	for (int i = low; i <=high; i++)
		a[i] = b[i];
	return c1 + c2 + c3;
}



int main()
{
	int n;
	while (cin >> n&&n != -1)
	{
		int *A = new int[n];
		int *B = new int[n];
		for (int i = 0; i < n; i++)
			cin >> A[i];
		cout << reverseOrderPairs(A, B, 0, n - 1) << endl;
		delete[] A;
		delete[] B;
	}
	return 0;
}