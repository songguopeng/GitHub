#include<iostream>
#include<algorithm>
#include<vector>
#include<functional>
using namespace std;


template<class _inpPara,class _outPara>
class CSum :public unary_function<_inpPara,_outPara>
{
public:
	_outPara sum;
	CSum(_outPara n=0) { sum = n; }
	void operator()(_inpPara n)
	{
		sum += n;
	}
	_outPara GetSum()
	{
		return sum;
	}
};

int main()
{
	vector<int> v;
	for (int i = 1; i <= 100; i++)
		v.push_back(i);
	CSum<int, int> sObj = for_each(v.begin(), v.end(), CSum<int, int>());
	cout << sObj.GetSum() << endl;
	vector<float>v2;
	float f = 1.3f;
	for (int i = 1; i <= 99; i++)
	{
		v2.push_back(f);
		f += 1.0f;
	}
	CSum<float, float> S = for_each(v2.begin(), v2.end(), CSum<float, float>(2));
	cout << S.GetSum() << endl;

	
	system("pause");
	return 0;
}