#include<iostream>
#include<algorithm>
#include<vector>
#include<functional>

using namespace std;
bool ValidOrder(vector<int>::iterator start,vector<int>::iterator end,int *s,int total)
{
	int nSize = end - start;
	int sum = 0;
	for (int i = 0; i < nSize; i++)
	{
		if (*(start + i) == 1)
		{
			sum += s[i];
		}
	}
	return sum == total;
}

int main()
{
	int X[] = { 10,20,30,40,50,60 };
	int y = 60;
	int n = sizeof(X) / sizeof(int);
	vector<int>v(6);
	for (int k = 0; k <= n - 1; k++)
	{
		if (n - k - 2 >= 0)
			fill(v.begin(), v.begin() + n - k - 2,0);
		fill(v.begin() + n - k - 1, v.end(), 1);
		do
		{
			if (ValidOrder(v.begin(), v.end(), X, y))
			{
				for (int i = 0; i < n; ++i)
				{
					if (v[i])
						cout << X[i]<<' ';
				}
				cout << endl;
				for(auto it=v.begin();it!=v.end();++it)
					cout << *it;
				cout << endl;
			}
		} while (next_permutation(v.begin(), v.end()));
	}
	system("pause");
	return 0;
}