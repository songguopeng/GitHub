#include<iostream>
#include<vector>
#include<iterator>

using namespace std;

void merge(int *a, int *b, int low, int mid, int high)
{
	int i = low, j = mid + 1, k = low;
	while (i <= mid&&j <= high)
	{
		if (a[i] < a[j])
			b[k++] = a[i++];
		else
			b[k++] = a[j++];
	}
	while (i <= mid)
		b[k++] = a[i++];
	while (j <= high)
		b[k++] = a[j++];
}
void mergeSort2(int *a,int len)
{
	int *B = new int[len];
	int step = 1, i = 0, j = 0;
	while (step < len)
	{
		i = 0;
		while (i <= (len - 2 * step))
		{
			merge(a, B, i, i + step - 1, i + 2 * step - 1);
			i += 2 * step;
		}
		if (i + step < len)//剩下元素个数少于2*step,大于step个
		{
			merge(a, B, i, i + step - 1, len - 1);
		}
		else//剩下元素少于等于step个
			for (j = i; j < len; j++)
				B[j] = a[j];
		for (j = 0; j < len; j++)//拷贝回部分有序数组
			a[j] = B[j];
		step += step;//更新步长
	}
	delete[] B;
}





int main()
{
	int n;
	while (cin >> n&&n != -1)
	{
		int *A= new int[n];
		for (int i = 0; i < n; i++)
			cin >> A[i];
		copy(A, A + n, ostream_iterator<int>(cout, "\t"));
		cout << endl;
		mergeSort2(A, n);
		copy(A, A + n, ostream_iterator<int>(cout, "\t"));
		cout << endl;
		delete[] A;

	}
}