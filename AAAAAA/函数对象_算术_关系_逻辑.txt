#include<iostream>
#include<functional>
#include<vector>
#include<numeric>
using namespace std;

//int main()
//{
//	//以下产生算术类函数对象实体
//	plus<int> A;
//	minus<int> B;
//	multiplies<int> C; 
//	modulus<int> D;
//	divides<int> E;
//	cout << A(10, 20) << endl;
//	cout << B(20, 10) << endl;
//	cout << C(20, 10) << endl;
//	cout << D(21, 10) << endl;
//	cout << E(20, 10) << endl;
//	
//	cout << "以下直接以函数对象的临时对象履行函数功能；" << endl;
//	//functional<T>()是一个临时对象，调用operator运算符
//	cout << plus<int>()(300, 20) << endl;
//	cout << minus<int>()(3, 4) << endl;
//	cout << modulus<int>()(32, 3) << endl;
//	cout << divides<int>()(32, 3) << endl;
//	cout << multiplies<int>()(34, 2) << endl;
//
//
//	system("pause");
//	return 0;
//}
////复数情况下的加法：
class Complex
{
public:
	float real;
	float img;
public:
	Complex()
	{
		this->real = 0.0f;
		this->img = 0.0f;
	}
	Complex(float real, float img)
	{
		this->real = real;
		this->img = img;
	}
	Complex operator +(const Complex&c)const
	{
		Complex rnt;
		rnt.real=this->real + c.real;
		rnt.img=this->img + c.img;
		return rnt;
	}
};
//int main()
//{
//	Complex c1(1.0f, 2.0f);
//	Complex c2(3.0f, 4.0f);
//	Complex c3 = c1 + c2;
//	cout << "C3:" << c3.real << " " << c3.img << endl;
//	Complex c4 = plus<Complex>()(c1, c2);
//	cout << "C4:" << c4.real << " " << c4.img << endl;
//
//	system("pause");
//	return 0;
//}

//int main()
//{
//	Complex c1(1, 3);
//	Complex c2(2, 5);
//	Complex c3 = plus<Complex>()(c1, c2);
//	Complex c4 = c1 + c2;
//	Complex c;
//	vector<Complex>v;
//	v.push_back(c1);
//	v.push_back(c2);
//	v.push_back(c3);
//	v.push_back(c4);
//
//	Complex rnt = accumulate(v.begin(), v.end(), c, plus<Complex>());
//	cout << rnt.real << " " << rnt.img << endl;
//	system("pause");
//	return 0;
//
//}

//int main()
//{
//	cout << "以下是产生一些关系运算函数对象实体" << endl;
//	equal_to<int> A;
//	not_equal_to<int> B;
//	greater<int> C;
//	greater_equal<int> D;
//	less<int> E;
//	less_equal<int> F;
//	cout << A(10, 20) << endl;
//	cout << B(10, 20) << endl;
//	cout << C(10, 20) << endl;
//	cout << D(10, 20) << endl;
//	cout << E(20, 10) << endl;
//	cout << F(20, 10) << endl;
//	cout << "以下直接以临时对象执行函数功能：" << endl;
//
//	cout << equal_to<int>()(20, 30) << endl;
//	cout << not_equal_to<int>()(20, 30) << endl;
//	cout << greater<int>()(20, 30) << endl;
//	cout << greater_equal<int>()(20, 30) << endl;
//	cout << less<int>()(20, 30) << endl;
//	cout << less_equal<int>()(20, 30) << endl;
//	system("pause");
//	return 0;
//}

int main()
{
	logical_and<int> A;
	logical_not<int> B;
	logical_or<int> C;
	cout << "函数对象体：" << endl;
	cout << A(true, true) << endl;
	cout << B(true) << endl;
	cout << C(true, false) << endl;
	cout << "临时对象执行函数功能：" << endl;
	cout << logical_and<int>()(10, 20) << endl;
	cout << logical_not<int>()(10) << endl;
	cout << logical_or<int>()(10, 20) << endl;

	system("pause");
	return 0;

}